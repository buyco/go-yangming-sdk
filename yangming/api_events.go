/*
Yang Ming Track and Trace API

API specifications for the Track and Trace interface standard

API version: DCSA Standard
Contact: itcs@yangming.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package yangming

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

// Linger please
var (
	_ context.Context
)

type EventsApi interface {

	/*
	V110GGetEvents Find events by Booking Reference, Bill of Lading or Equipment Reference.

	Returns all events related to the query parameter. The endpoint requires at least 1 of the 3 query parameters to be used.

	 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiV110GGetEventsRequest
	*/
	V110GGetEvents(ctx context.Context) ApiV110GGetEventsRequest

	// V110GGetEventsExecute executes the request
	//  @return Events
	V110GGetEventsExecute(r ApiV110GGetEventsRequest) (*Events, *http.Response, error)
}

// EventsApiService EventsApi service
type EventsApiService service

type ApiV110GGetEventsRequest struct {
	ctx context.Context
	ApiService EventsApi
	keyId *string
	bookingReference *string
	billOfLadingNumber *string
	equipmentReference *string
}

func (r ApiV110GGetEventsRequest) KeyId(keyId string) ApiV110GGetEventsRequest {
	r.keyId = &keyId
	return r
}
// The identifier for a shipment, which is issued by and unique within each of the carriers.
func (r ApiV110GGetEventsRequest) BookingReference(bookingReference string) ApiV110GGetEventsRequest {
	r.bookingReference = &bookingReference
	return r
}
// Bill of lading number is an identifier that links to a shipment. Bill of Lading is the legal document issued to the customer, which confirms the carrier&#39;s receipt of the cargo from the customer acknowledging goods being shipped and specifying the terms of delivery.
func (r ApiV110GGetEventsRequest) BillOfLadingNumber(billOfLadingNumber string) ApiV110GGetEventsRequest {
	r.billOfLadingNumber = &billOfLadingNumber
	return r
}
// The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
func (r ApiV110GGetEventsRequest) EquipmentReference(equipmentReference string) ApiV110GGetEventsRequest {
	r.equipmentReference = &equipmentReference
	return r
}

func (r ApiV110GGetEventsRequest) Execute() (*Events, *http.Response, error) {
	return r.ApiService.V110GGetEventsExecute(r)
}

/*
V110GGetEvents Find events by Booking Reference, Bill of Lading or Equipment Reference.

Returns all events related to the query parameter. The endpoint requires at least 1 of the 3 query parameters to be used.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV110GGetEventsRequest
*/
func (a *EventsApiService) V110GGetEvents(ctx context.Context) ApiV110GGetEventsRequest {
	return ApiV110GGetEventsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Events
func (a *EventsApiService) V110GGetEventsExecute(r ApiV110GGetEventsRequest) (*Events, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Events
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventsApiService.V110GGetEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1.1.0/events"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.bookingReference != nil {
		localVarQueryParams.Add("bookingReference", parameterToString(*r.bookingReference, ""))
	}
	if r.billOfLadingNumber != nil {
		localVarQueryParams.Add("billOfLadingNumber", parameterToString(*r.billOfLadingNumber, ""))
	}
	if r.equipmentReference != nil {
		localVarQueryParams.Add("equipmentReference", parameterToString(*r.equipmentReference, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.keyId != nil {
		localVarHeaderParams["KeyId"] = parameterToString(*r.keyId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
