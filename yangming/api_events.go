/*
Yang Ming Track and Trace API

API specifications for the Track and Trace interface standard

API version: DCSA Standard
Contact: itcs@yangming.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package yangming

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)

type EventsAPI interface {

	/*
			GetEvents Find events.

			Returns all events filtered by the queryParameters. The endpoint requires at least 1 of the 3 query parameters. (Carrier Booking Reference, Equipment Reference, Transport Document Reference)

		**NB**: It is possible to combine queryParameters. When combining queryParameters be aware that it is also possible to make combinations that are mutual contradicting.

		Example: *shipmentEventTypeCode=DRFT and equipmentEventTypeCode=GTIN*

		Since there is no event that can be a ShipmentEvent and an EquipmentEvent at the same time **this will return an empty list!**


			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@return ApiGetEventsRequest
	*/
	GetEvents(ctx context.Context) ApiGetEventsRequest

	// GetEventsExecute executes the request
	//  @return Events
	GetEventsExecute(r ApiGetEventsRequest) (*Events, *http.Response, error)
}

// EventsAPIService EventsAPI service
type EventsAPIService service

type ApiGetEventsRequest struct {
	ctx                        context.Context
	ApiService                 EventsAPI
	keyId                      *string
	carrierBookingReference    *string
	transportDocumentReference *string
	equipmentReference         *string
	transportEventTypeCode     *[]string
	vesselIMONumber            *string
	transportCallID            *string
	exportVoyageNumber         *string
	equipmentEventTypeCode     *[]string
	carrierServiceCode         *string
	eventType                  *[]string
	uNLocationCode             *string
}

func (r ApiGetEventsRequest) KeyId(keyId string) ApiGetEventsRequest {
	r.keyId = &keyId
	return r
}

// A set of unique characters provided by carrier to identify a booking.&lt;br&gt;Specifying this filter will only return events related to this particular carrierBookingReference.&lt;br&gt;&lt;small&gt;*maxLength: 35*&lt;/small&gt;
func (r ApiGetEventsRequest) CarrierBookingReference(carrierBookingReference string) ApiGetEventsRequest {
	r.carrierBookingReference = &carrierBookingReference
	return r
}

// A unique number reference allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.&lt;br&gt;Specifying this filter will only return events related to this particular transportDocumentReference &lt;br&gt;&lt;small&gt;*maxLength: 20*&lt;/small&gt;
func (r ApiGetEventsRequest) TransportDocumentReference(transportDocumentReference string) ApiGetEventsRequest {
	r.transportDocumentReference = &transportDocumentReference
	return r
}

// Will filter by the unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.&lt;br&gt;Specifying this filter will only return events related to this particular equipmentReference&lt;br&gt;&lt;small&gt;*maxLength: 15*&lt;/small&gt;
func (r ApiGetEventsRequest) EquipmentReference(equipmentReference string) ApiGetEventsRequest {
	r.equipmentReference = &equipmentReference
	return r
}

// Identifier for type of Transport event to filter by   - ARRI (Arrived)   - DEPA (Departed)  It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example *transportEventTypeCode&#x3D;ARRI,DEPA* matches **both** Arrived (ARRI) and Departed (DEPA) transport events.&lt;br&gt;Default is all transportEventTypeCodes.&lt;br&gt;This filter is only relevant when filtering on TransportEvents&lt;br&gt;*Available values* : ARRI, DEPA&lt;br&gt;*Default value* : ARRI,DEPA&lt;br&gt;*Example* : List [\&quot;ARRI\&quot;,\&quot;DEPA\&quot;]
func (r ApiGetEventsRequest) TransportEventTypeCode(transportEventTypeCode []string) ApiGetEventsRequest {
	r.transportEventTypeCode = &transportEventTypeCode
	return r
}

// The identifier of vessel for which schedule details are published. Depending on schedule type, this may not be available yet.&lt;br&gt;Specifying this filter will only return events related to this particular vesselIMONumber. &lt;br&gt;&lt;small&gt;*maxLength: 7*&lt;/small&gt;
func (r ApiGetEventsRequest) VesselIMONumber(vesselIMONumber string) ApiGetEventsRequest {
	r.vesselIMONumber = &vesselIMONumber
	return r
}

// ID uniquely identifying a transport call, to filter events by.&lt;br&gt;Specifying this filter will only return events related to this particular transportCallID &lt;br&gt;&lt;small&gt;*maxLength: 100*&lt;/small&gt;
func (r ApiGetEventsRequest) TransportCallID(transportCallID string) ApiGetEventsRequest {
	r.transportCallID = &transportCallID
	return r
}

// Filter on the vessel operator-specific identifier of the export Voyage.&lt;br&gt;Specifying this filter will only return events related to this particular exportVoyageNumber. &lt;br&gt;&lt;small&gt;*maxLength: 50*&lt;/small&gt;
func (r ApiGetEventsRequest) ExportVoyageNumber(exportVoyageNumber string) ApiGetEventsRequest {
	r.exportVoyageNumber = &exportVoyageNumber
	return r
}

// Unique identifier for equipmentEventTypeCode.   - LOAD (Loaded)   - DISC (Discharged)   - GTIN (Gated in)   - GTOT (Gated out)   - STUF (Stuffed)   - STRP (Stripped)   - PICK (Pick-up)   - DROP (Drop-off)   - INSP (Inspected)   - RSEA (Resealed)   - RMVD (Removed)  It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example *equipmentEventTypeCode&#x3D;GTIN,GTOT* matches **both** Gated in (GTIN) and Gated out (GTOT) equipment events.&lt;br&gt;Default is all equipmentEventTypeCodes.&lt;br&gt;This filter is only relevant when filtering on EquipmentEvents&lt;br&gt;*Available values* : LOAD, DISC, GTIN, GTOT, STUF, STRP, PICK, DROP, INSP, RSEA, RMVD&lt;br&gt;*Default value* : LOAD,DISC,GTIN,GTOT,STUF,STRP,PICK,DROP,INSP,RSEA,RMVD&lt;br&gt;*Example* : List [\&quot;GTOT\&quot;,\&quot;GTIN\&quot;]
func (r ApiGetEventsRequest) EquipmentEventTypeCode(equipmentEventTypeCode []string) ApiGetEventsRequest {
	r.equipmentEventTypeCode = &equipmentEventTypeCode
	return r
}

// Filter on the carrier specific identifier of the service.&lt;br&gt;Specifying this filter will only return events related to this particular carrierServiceCode.&lt;br&gt;&lt;small&gt;*maxLength: 5*&lt;/small&gt;
func (r ApiGetEventsRequest) CarrierServiceCode(carrierServiceCode string) ApiGetEventsRequest {
	r.carrierServiceCode = &carrierServiceCode
	return r
}

// The type of event(s) to filter by. Possible values are   - TRANSPORT (Transport events)   - EQUIPMENT (Equipment events)  It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example eventType&#x3D;TRANSPORT,EQUIPMENT matches both Transport and Equipment events.&lt;br&gt;Default value is all event types.&lt;br&gt;*Available values* : TRANSPORT, EQUIPMENT&lt;br&gt;*Example* : List [\&quot;TRANSPORT\&quot;,\&quot;EQUIPMENT\&quot;]
func (r ApiGetEventsRequest) EventType(eventType []string) ApiGetEventsRequest {
	r.eventType = &eventType
	return r
}

// The UN Location code specifying where the place is located.&lt;br&gt;Specifying this filter will only return events related to this particular UN Location code.&lt;br&gt;&lt;small&gt;*maxLength: 5*&lt;/small&gt;
func (r ApiGetEventsRequest) UNLocationCode(uNLocationCode string) ApiGetEventsRequest {
	r.uNLocationCode = &uNLocationCode
	return r
}

func (r ApiGetEventsRequest) Execute() (*Events, *http.Response, error) {
	return r.ApiService.GetEventsExecute(r)
}

/*
GetEvents Find events.

Returns all events filtered by the queryParameters. The endpoint requires at least 1 of the 3 query parameters. (Carrier Booking Reference, Equipment Reference, Transport Document Reference)

**NB**: It is possible to combine queryParameters. When combining queryParameters be aware that it is also possible to make combinations that are mutual contradicting.

Example: *shipmentEventTypeCode=DRFT and equipmentEventTypeCode=GTIN*

Since there is no event that can be a ShipmentEvent and an EquipmentEvent at the same time **this will return an empty list!**

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetEventsRequest
*/
func (a *EventsAPIService) GetEvents(ctx context.Context) ApiGetEventsRequest {
	return ApiGetEventsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Events
func (a *EventsAPIService) GetEventsExecute(r ApiGetEventsRequest) (*Events, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Events
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventsAPIService.GetEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/events"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.carrierBookingReference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "carrierBookingReference", r.carrierBookingReference, "form", "")
	}
	if r.transportDocumentReference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transportDocumentReference", r.transportDocumentReference, "form", "")
	}
	if r.equipmentReference != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "equipmentReference", r.equipmentReference, "form", "")
	}
	if r.transportEventTypeCode != nil {
		t := *r.transportEventTypeCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "transportEventTypeCode", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "transportEventTypeCode", t, "form", "multi")
		}
	}
	if r.vesselIMONumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vesselIMONumber", r.vesselIMONumber, "form", "")
	}
	if r.transportCallID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transportCallID", r.transportCallID, "form", "")
	}
	if r.exportVoyageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exportVoyageNumber", r.exportVoyageNumber, "form", "")
	}
	if r.equipmentEventTypeCode != nil {
		t := *r.equipmentEventTypeCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "equipmentEventTypeCode", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "equipmentEventTypeCode", t, "form", "multi")
		}
	}
	if r.carrierServiceCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "carrierServiceCode", r.carrierServiceCode, "form", "")
	}
	if r.eventType != nil {
		t := *r.eventType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "eventType", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "eventType", t, "form", "multi")
		}
	}
	if r.uNLocationCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UNLocationCode", r.uNLocationCode, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.keyId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "KeyId", r.keyId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ApiError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
