/*
Yang Ming Track and Trace API

API specifications for the Track and Trace interface standard

API version: DCSA Standard
Contact: itcs@yangming.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package yangming

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ApiError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiError{}

// ApiError struct for ApiError
type ApiError struct {
	// The HTTP request method type.
	HttpMethod string `json:"httpMethod"`
	// The request URI.
	RequestUri string      `json:"requestUri"`
	Errors     []SubErrors `json:"errors"`
	// The HTTP status code.
	StatusCode int32 `json:"statusCode"`
	// The textual representation of the response status.
	StatusCodeText string `json:"statusCodeText"`
	// The date and time (in ISO 8601 format) the error occured.
	ErrorDateTime time.Time `json:"errorDateTime"`
}

type _ApiError ApiError

// NewApiError instantiates a new ApiError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiError(httpMethod string, requestUri string, errors []SubErrors, statusCode int32, statusCodeText string, errorDateTime time.Time) *ApiError {
	this := ApiError{}
	this.HttpMethod = httpMethod
	this.RequestUri = requestUri
	this.Errors = errors
	this.StatusCode = statusCode
	this.StatusCodeText = statusCodeText
	this.ErrorDateTime = errorDateTime
	return &this
}

// NewApiErrorWithDefaults instantiates a new ApiError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiErrorWithDefaults() *ApiError {
	this := ApiError{}
	return &this
}

// GetHttpMethod returns the HttpMethod field value
func (o *ApiError) GetHttpMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HttpMethod
}

// GetHttpMethodOk returns a tuple with the HttpMethod field value
// and a boolean to check if the value has been set.
func (o *ApiError) GetHttpMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HttpMethod, true
}

// SetHttpMethod sets field value
func (o *ApiError) SetHttpMethod(v string) {
	o.HttpMethod = v
}

// GetRequestUri returns the RequestUri field value
func (o *ApiError) GetRequestUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestUri
}

// GetRequestUriOk returns a tuple with the RequestUri field value
// and a boolean to check if the value has been set.
func (o *ApiError) GetRequestUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestUri, true
}

// SetRequestUri sets field value
func (o *ApiError) SetRequestUri(v string) {
	o.RequestUri = v
}

// GetErrors returns the Errors field value
func (o *ApiError) GetErrors() []SubErrors {
	if o == nil {
		var ret []SubErrors
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *ApiError) GetErrorsOk() ([]SubErrors, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errors, true
}

// SetErrors sets field value
func (o *ApiError) SetErrors(v []SubErrors) {
	o.Errors = v
}

// GetStatusCode returns the StatusCode field value
func (o *ApiError) GetStatusCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value
// and a boolean to check if the value has been set.
func (o *ApiError) GetStatusCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusCode, true
}

// SetStatusCode sets field value
func (o *ApiError) SetStatusCode(v int32) {
	o.StatusCode = v
}

// GetStatusCodeText returns the StatusCodeText field value
func (o *ApiError) GetStatusCodeText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StatusCodeText
}

// GetStatusCodeTextOk returns a tuple with the StatusCodeText field value
// and a boolean to check if the value has been set.
func (o *ApiError) GetStatusCodeTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusCodeText, true
}

// SetStatusCodeText sets field value
func (o *ApiError) SetStatusCodeText(v string) {
	o.StatusCodeText = v
}

// GetErrorDateTime returns the ErrorDateTime field value
func (o *ApiError) GetErrorDateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ErrorDateTime
}

// GetErrorDateTimeOk returns a tuple with the ErrorDateTime field value
// and a boolean to check if the value has been set.
func (o *ApiError) GetErrorDateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorDateTime, true
}

// SetErrorDateTime sets field value
func (o *ApiError) SetErrorDateTime(v time.Time) {
	o.ErrorDateTime = v
}

func (o ApiError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["httpMethod"] = o.HttpMethod
	toSerialize["requestUri"] = o.RequestUri
	toSerialize["errors"] = o.Errors
	toSerialize["statusCode"] = o.StatusCode
	toSerialize["statusCodeText"] = o.StatusCodeText
	toSerialize["errorDateTime"] = o.ErrorDateTime
	return toSerialize, nil
}

func (o *ApiError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"httpMethod",
		"requestUri",
		"errors",
		"statusCode",
		"statusCodeText",
		"errorDateTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiError := _ApiError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiError)

	if err != nil {
		return err
	}

	*o = ApiError(varApiError)

	return err
}

type NullableApiError struct {
	value *ApiError
	isSet bool
}

func (v NullableApiError) Get() *ApiError {
	return v.value
}

func (v *NullableApiError) Set(val *ApiError) {
	v.value = val
	v.isSet = true
}

func (v NullableApiError) IsSet() bool {
	return v.isSet
}

func (v *NullableApiError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiError(val *ApiError) *NullableApiError {
	return &NullableApiError{value: val, isSet: true}
}

func (v NullableApiError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
