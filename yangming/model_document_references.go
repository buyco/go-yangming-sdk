/*
Yang Ming Track and Trace API

API specifications for the Track and Trace interface standard

API version: DCSA Standard
Contact: itcs@yangming.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package yangming

import (
	"encoding/json"
)

// checks if the DocumentReferences type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentReferences{}

// DocumentReferences An optional list of key-value (documentReferenceType-documentReferenceValue) pairs representing links to objects relevant to the event. The documentReferenceType-field is used to describe where the documentReferenceValue-field is pointing to.
type DocumentReferences struct {
	// Describes where the documentReferenceValue is pointing to  Enum:  [ BKG (Booking), TRD (Transport Document) ]
	DocumentReferenceType *string `json:"documentReferenceType,omitempty"`
	// The value of the identifier the documentReferenceType is describing
	DocumentReferenceValue *string `json:"documentReferenceValue,omitempty"`
}

// NewDocumentReferences instantiates a new DocumentReferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentReferences() *DocumentReferences {
	this := DocumentReferences{}
	return &this
}

// NewDocumentReferencesWithDefaults instantiates a new DocumentReferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentReferencesWithDefaults() *DocumentReferences {
	this := DocumentReferences{}
	return &this
}

// GetDocumentReferenceType returns the DocumentReferenceType field value if set, zero value otherwise.
func (o *DocumentReferences) GetDocumentReferenceType() string {
	if o == nil || IsNil(o.DocumentReferenceType) {
		var ret string
		return ret
	}
	return *o.DocumentReferenceType
}

// GetDocumentReferenceTypeOk returns a tuple with the DocumentReferenceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReferences) GetDocumentReferenceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentReferenceType) {
		return nil, false
	}
	return o.DocumentReferenceType, true
}

// HasDocumentReferenceType returns a boolean if a field has been set.
func (o *DocumentReferences) HasDocumentReferenceType() bool {
	if o != nil && !IsNil(o.DocumentReferenceType) {
		return true
	}

	return false
}

// SetDocumentReferenceType gets a reference to the given string and assigns it to the DocumentReferenceType field.
func (o *DocumentReferences) SetDocumentReferenceType(v string) {
	o.DocumentReferenceType = &v
}

// GetDocumentReferenceValue returns the DocumentReferenceValue field value if set, zero value otherwise.
func (o *DocumentReferences) GetDocumentReferenceValue() string {
	if o == nil || IsNil(o.DocumentReferenceValue) {
		var ret string
		return ret
	}
	return *o.DocumentReferenceValue
}

// GetDocumentReferenceValueOk returns a tuple with the DocumentReferenceValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentReferences) GetDocumentReferenceValueOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentReferenceValue) {
		return nil, false
	}
	return o.DocumentReferenceValue, true
}

// HasDocumentReferenceValue returns a boolean if a field has been set.
func (o *DocumentReferences) HasDocumentReferenceValue() bool {
	if o != nil && !IsNil(o.DocumentReferenceValue) {
		return true
	}

	return false
}

// SetDocumentReferenceValue gets a reference to the given string and assigns it to the DocumentReferenceValue field.
func (o *DocumentReferences) SetDocumentReferenceValue(v string) {
	o.DocumentReferenceValue = &v
}

func (o DocumentReferences) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentReferences) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DocumentReferenceType) {
		toSerialize["documentReferenceType"] = o.DocumentReferenceType
	}
	if !IsNil(o.DocumentReferenceValue) {
		toSerialize["documentReferenceValue"] = o.DocumentReferenceValue
	}
	return toSerialize, nil
}

type NullableDocumentReferences struct {
	value *DocumentReferences
	isSet bool
}

func (v NullableDocumentReferences) Get() *DocumentReferences {
	return v.value
}

func (v *NullableDocumentReferences) Set(val *DocumentReferences) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentReferences) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentReferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentReferences(val *DocumentReferences) *NullableDocumentReferences {
	return &NullableDocumentReferences{value: val, isSet: true}
}

func (v NullableDocumentReferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentReferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
