/*
Yang Ming Track and Trace API

API specifications for the Track and Trace interface standard

API version: DCSA Standard
Contact: itcs@yangming.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package yangming

import (
	"encoding/json"
	"fmt"
)

// checks if the Event type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Event{}

// Event struct for Event
type Event struct {
	EquipmentEvent *EquipmentEvent
	TransportEvent *TransportEvent
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Event) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'EQUIPMENT'
	if jsonDict["eventType"] == "EQUIPMENT" {
		// try to unmarshal JSON data into EquipmentEvent
		err = json.Unmarshal(data, &dst.EquipmentEvent)
		if err == nil {
			jsonEquipmentEvent, _ := json.Marshal(dst.EquipmentEvent)
			if string(jsonEquipmentEvent) == "{}" { // empty struct
				dst.EquipmentEvent = nil
			} else {
				return nil // data stored in dst.EquipmentEvent, return on the first match
			}
		} else {
			dst.EquipmentEvent = nil
		}
	}

	// check if the discriminator value is 'TRANSPORT'
	if jsonDict["eventType"] == "TRANSPORT" {
		// try to unmarshal JSON data into TransportEvent
		err = json.Unmarshal(data, &dst.TransportEvent)
		if err == nil {
			jsonTransportEvent, _ := json.Marshal(dst.TransportEvent)
			if string(jsonTransportEvent) == "{}" { // empty struct
				dst.TransportEvent = nil
			} else {
				return nil // data stored in dst.TransportEvent, return on the first match
			}
		} else {
			dst.TransportEvent = nil
		}
	}

	// check if the discriminator value is 'equipmentEvent'
	if jsonDict["eventType"] == "equipmentEvent" {
		// try to unmarshal JSON data into EquipmentEvent
		err = json.Unmarshal(data, &dst.EquipmentEvent)
		if err == nil {
			jsonEquipmentEvent, _ := json.Marshal(dst.EquipmentEvent)
			if string(jsonEquipmentEvent) == "{}" { // empty struct
				dst.EquipmentEvent = nil
			} else {
				return nil // data stored in dst.EquipmentEvent, return on the first match
			}
		} else {
			dst.EquipmentEvent = nil
		}
	}

	// check if the discriminator value is 'transportEvent'
	if jsonDict["eventType"] == "transportEvent" {
		// try to unmarshal JSON data into TransportEvent
		err = json.Unmarshal(data, &dst.TransportEvent)
		if err == nil {
			jsonTransportEvent, _ := json.Marshal(dst.TransportEvent)
			if string(jsonTransportEvent) == "{}" { // empty struct
				dst.TransportEvent = nil
			} else {
				return nil // data stored in dst.TransportEvent, return on the first match
			}
		} else {
			dst.TransportEvent = nil
		}
	}

	// try to unmarshal JSON data into EquipmentEvent
	err = json.Unmarshal(data, &dst.EquipmentEvent)
	if err == nil {
		jsonEquipmentEvent, _ := json.Marshal(dst.EquipmentEvent)
		if string(jsonEquipmentEvent) == "{}" { // empty struct
			dst.EquipmentEvent = nil
		} else {
			return nil // data stored in dst.EquipmentEvent, return on the first match
		}
	} else {
		dst.EquipmentEvent = nil
	}

	// try to unmarshal JSON data into TransportEvent
	err = json.Unmarshal(data, &dst.TransportEvent)
	if err == nil {
		jsonTransportEvent, _ := json.Marshal(dst.TransportEvent)
		if string(jsonTransportEvent) == "{}" { // empty struct
			dst.TransportEvent = nil
		} else {
			return nil // data stored in dst.TransportEvent, return on the first match
		}
	} else {
		dst.TransportEvent = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Event)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Event) MarshalJSON() ([]byte, error) {
	if src.EquipmentEvent != nil {
		return json.Marshal(&src.EquipmentEvent)
	}

	if src.TransportEvent != nil {
		return json.Marshal(&src.TransportEvent)
	}

	return nil, nil // no data in anyOf schemas
}

func (src Event) ToMap() (map[string]interface{}, error) {
	if src.EquipmentEvent != nil {
		return src.EquipmentEvent.ToMap()
	}

	if src.TransportEvent != nil {
		return src.TransportEvent.ToMap()
	}

	return nil, nil // no data in anyOf schemas
}

type NullableEvent struct {
	value *Event
	isSet bool
}

func (v NullableEvent) Get() *Event {
	return v.value
}

func (v *NullableEvent) Set(val *Event) {
	v.value = val
	v.isSet = true
}

func (v NullableEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvent(val *Event) *NullableEvent {
	return &NullableEvent{value: val, isSet: true}
}

func (v NullableEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
