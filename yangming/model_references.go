/*
Yang Ming Track and Trace API

API specifications for the Track and Trace interface standard

API version: DCSA Standard
Contact: itcs@yangming.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package yangming

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the References type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &References{}

// References references provided by the shipper or freight forwarder at the time of booking or at the time of providing shipping instruction. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.
type References struct {
	// The reference type codes defined by DCSA.   - FF (Freight Forwarder’s Reference)   - SI (Shipper’s Reference)   - PO (Purchase Order Reference)   - CR (Customer’s Reference)   - AAO (Consignee’s Reference)   - EQ (Equipment Reference)  Enum:  [ FF, SI, PO, CR, AAO, EQ ]
	ReferenceType string `json:"referenceType"`
	// <small>maxLength: 100</small>  The actual value of the reference.
	ReferenceValue string `json:"referenceValue"`
}

type _References References

// NewReferences instantiates a new References object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReferences(referenceType string, referenceValue string) *References {
	this := References{}
	this.ReferenceType = referenceType
	this.ReferenceValue = referenceValue
	return &this
}

// NewReferencesWithDefaults instantiates a new References object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReferencesWithDefaults() *References {
	this := References{}
	return &this
}

// GetReferenceType returns the ReferenceType field value
func (o *References) GetReferenceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceType
}

// GetReferenceTypeOk returns a tuple with the ReferenceType field value
// and a boolean to check if the value has been set.
func (o *References) GetReferenceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceType, true
}

// SetReferenceType sets field value
func (o *References) SetReferenceType(v string) {
	o.ReferenceType = v
}

// GetReferenceValue returns the ReferenceValue field value
func (o *References) GetReferenceValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceValue
}

// GetReferenceValueOk returns a tuple with the ReferenceValue field value
// and a boolean to check if the value has been set.
func (o *References) GetReferenceValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceValue, true
}

// SetReferenceValue sets field value
func (o *References) SetReferenceValue(v string) {
	o.ReferenceValue = v
}

func (o References) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o References) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["referenceType"] = o.ReferenceType
	toSerialize["referenceValue"] = o.ReferenceValue
	return toSerialize, nil
}

func (o *References) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"referenceType",
		"referenceValue",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReferences := _References{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReferences)

	if err != nil {
		return err
	}

	*o = References(varReferences)

	return err
}

type NullableReferences struct {
	value *References
	isSet bool
}

func (v NullableReferences) Get() *References {
	return v.value
}

func (v *NullableReferences) Set(val *References) {
	v.value = val
	v.isSet = true
}

func (v NullableReferences) IsSet() bool {
	return v.isSet
}

func (v *NullableReferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReferences(val *References) *NullableReferences {
	return &NullableReferences{value: val, isSet: true}
}

func (v NullableReferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
