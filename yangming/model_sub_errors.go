/*
Yang Ming Track and Trace API

API specifications for the Track and Trace interface standard

API version: DCSA Standard
Contact: itcs@yangming.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package yangming

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SubErrors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubErrors{}

// SubErrors struct for SubErrors
type SubErrors struct {
	// High level error message
	Reason string `json:"reason"`
	// Detailed error message.
	Message string `json:"message"`
}

type _SubErrors SubErrors

// NewSubErrors instantiates a new SubErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubErrors(reason string, message string) *SubErrors {
	this := SubErrors{}
	this.Reason = reason
	this.Message = message
	return &this
}

// NewSubErrorsWithDefaults instantiates a new SubErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubErrorsWithDefaults() *SubErrors {
	this := SubErrors{}
	return &this
}

// GetReason returns the Reason field value
func (o *SubErrors) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *SubErrors) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *SubErrors) SetReason(v string) {
	o.Reason = v
}

// GetMessage returns the Message field value
func (o *SubErrors) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *SubErrors) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *SubErrors) SetMessage(v string) {
	o.Message = v
}

func (o SubErrors) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubErrors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reason"] = o.Reason
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *SubErrors) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reason",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubErrors := _SubErrors{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubErrors)

	if err != nil {
		return err
	}

	*o = SubErrors(varSubErrors)

	return err
}

type NullableSubErrors struct {
	value *SubErrors
	isSet bool
}

func (v NullableSubErrors) Get() *SubErrors {
	return v.value
}

func (v *NullableSubErrors) Set(val *SubErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableSubErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableSubErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubErrors(val *SubErrors) *NullableSubErrors {
	return &NullableSubErrors{value: val, isSet: true}
}

func (v NullableSubErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
