/*
Yang Ming Track and Trace API

API specifications for the Track and Trace interface standard

API version: DCSA Standard
Contact: itcs@yangming.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package yangming

import (
	"encoding/json"
	"time"
)

// TransportEquipmentEvent The transport equipment event entity is a specialization of the event entity to support specification of data that applies to both transport and equipment events.
type TransportEquipmentEvent struct {
	// The unique identifier for the Equipment Event ID/Transport Event ID/Shipment Event ID.
	EventID string `json:"eventID"`
	// The local date and time, where the event took place, in ISO 8601 format.
	EventDateTime time.Time `json:"eventDateTime"`
	// Code for the event classifier, either PLN, ACT or EST.
	EventClassifierCode string `json:"eventClassifierCode"`
	// Unique identifier for Event Type Code.
	EventTypeCode string `json:"eventTypeCode"`
	// The reference for the transport, e.g. when the mode of transport is a vessel, the transport reference will be the vessel IMO number.
	TransportReference string `json:"transportReference"`
	// The transport leg reference will be specific per mode of transport:  Vessel: Voyage number as specified by the vessel operator  Truck: Not yet specified  Rail: Not yet specified  Barge: Not yet specified.
	TransportLegReference string `json:"transportLegReference"`
	// The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible. If a container is not yet assigned to a shipment, the interface cannot return any information when an equipment reference is given as input. If a container is assigned to an (active) shipment, the interface returns information on the active shipment.
	EquipmentReference string `json:"equipmentReference"`
	// The code to identify the specific type of facility.
	FacilityTypeCode string `json:"facilityTypeCode"`
	// The UN Location Code identifies a location in the sense of a city/a town/a village, being the smaller administrative area existing as defined by the competent national authority in each country.
	UNLocationCode string `json:"UNLocationCode"`
	// The code used for identifying the specific facility.
	FacilityCode string `json:"facilityCode"`
	// An alternative way to capture the facility when no standardized DCSA facility code can be found.
	OtherFacility *string `json:"otherFacility,omitempty"`
	// Code to denote whether the equipment is empty or laden.
	EmptyIndicatorCode string `json:"emptyIndicatorCode"`
	// A code specifying a type of transport mode.
	ModeOfTransportCode string `json:"modeOfTransportCode"`
}

// NewTransportEquipmentEvent instantiates a new TransportEquipmentEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransportEquipmentEvent(eventID string, eventDateTime time.Time, eventClassifierCode string, eventTypeCode string, transportReference string, transportLegReference string, equipmentReference string, facilityTypeCode string, uNLocationCode string, facilityCode string, emptyIndicatorCode string, modeOfTransportCode string) *TransportEquipmentEvent {
	this := TransportEquipmentEvent{}
	this.EventID = eventID
	this.EventDateTime = eventDateTime
	this.EventClassifierCode = eventClassifierCode
	this.EventTypeCode = eventTypeCode
	this.TransportReference = transportReference
	this.TransportLegReference = transportLegReference
	this.EquipmentReference = equipmentReference
	this.FacilityTypeCode = facilityTypeCode
	this.UNLocationCode = uNLocationCode
	this.FacilityCode = facilityCode
	this.EmptyIndicatorCode = emptyIndicatorCode
	this.ModeOfTransportCode = modeOfTransportCode
	return &this
}

// NewTransportEquipmentEventWithDefaults instantiates a new TransportEquipmentEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransportEquipmentEventWithDefaults() *TransportEquipmentEvent {
	this := TransportEquipmentEvent{}
	return &this
}

// GetEventID returns the EventID field value
func (o *TransportEquipmentEvent) GetEventID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventID
}

// GetEventIDOk returns a tuple with the EventID field value
// and a boolean to check if the value has been set.
func (o *TransportEquipmentEvent) GetEventIDOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventID, true
}

// SetEventID sets field value
func (o *TransportEquipmentEvent) SetEventID(v string) {
	o.EventID = v
}

// GetEventDateTime returns the EventDateTime field value
func (o *TransportEquipmentEvent) GetEventDateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EventDateTime
}

// GetEventDateTimeOk returns a tuple with the EventDateTime field value
// and a boolean to check if the value has been set.
func (o *TransportEquipmentEvent) GetEventDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventDateTime, true
}

// SetEventDateTime sets field value
func (o *TransportEquipmentEvent) SetEventDateTime(v time.Time) {
	o.EventDateTime = v
}

// GetEventClassifierCode returns the EventClassifierCode field value
func (o *TransportEquipmentEvent) GetEventClassifierCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventClassifierCode
}

// GetEventClassifierCodeOk returns a tuple with the EventClassifierCode field value
// and a boolean to check if the value has been set.
func (o *TransportEquipmentEvent) GetEventClassifierCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventClassifierCode, true
}

// SetEventClassifierCode sets field value
func (o *TransportEquipmentEvent) SetEventClassifierCode(v string) {
	o.EventClassifierCode = v
}

// GetEventTypeCode returns the EventTypeCode field value
func (o *TransportEquipmentEvent) GetEventTypeCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventTypeCode
}

// GetEventTypeCodeOk returns a tuple with the EventTypeCode field value
// and a boolean to check if the value has been set.
func (o *TransportEquipmentEvent) GetEventTypeCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventTypeCode, true
}

// SetEventTypeCode sets field value
func (o *TransportEquipmentEvent) SetEventTypeCode(v string) {
	o.EventTypeCode = v
}

// GetTransportReference returns the TransportReference field value
func (o *TransportEquipmentEvent) GetTransportReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransportReference
}

// GetTransportReferenceOk returns a tuple with the TransportReference field value
// and a boolean to check if the value has been set.
func (o *TransportEquipmentEvent) GetTransportReferenceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TransportReference, true
}

// SetTransportReference sets field value
func (o *TransportEquipmentEvent) SetTransportReference(v string) {
	o.TransportReference = v
}

// GetTransportLegReference returns the TransportLegReference field value
func (o *TransportEquipmentEvent) GetTransportLegReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransportLegReference
}

// GetTransportLegReferenceOk returns a tuple with the TransportLegReference field value
// and a boolean to check if the value has been set.
func (o *TransportEquipmentEvent) GetTransportLegReferenceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TransportLegReference, true
}

// SetTransportLegReference sets field value
func (o *TransportEquipmentEvent) SetTransportLegReference(v string) {
	o.TransportLegReference = v
}

// GetEquipmentReference returns the EquipmentReference field value
func (o *TransportEquipmentEvent) GetEquipmentReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EquipmentReference
}

// GetEquipmentReferenceOk returns a tuple with the EquipmentReference field value
// and a boolean to check if the value has been set.
func (o *TransportEquipmentEvent) GetEquipmentReferenceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EquipmentReference, true
}

// SetEquipmentReference sets field value
func (o *TransportEquipmentEvent) SetEquipmentReference(v string) {
	o.EquipmentReference = v
}

// GetFacilityTypeCode returns the FacilityTypeCode field value
func (o *TransportEquipmentEvent) GetFacilityTypeCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FacilityTypeCode
}

// GetFacilityTypeCodeOk returns a tuple with the FacilityTypeCode field value
// and a boolean to check if the value has been set.
func (o *TransportEquipmentEvent) GetFacilityTypeCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FacilityTypeCode, true
}

// SetFacilityTypeCode sets field value
func (o *TransportEquipmentEvent) SetFacilityTypeCode(v string) {
	o.FacilityTypeCode = v
}

// GetUNLocationCode returns the UNLocationCode field value
func (o *TransportEquipmentEvent) GetUNLocationCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UNLocationCode
}

// GetUNLocationCodeOk returns a tuple with the UNLocationCode field value
// and a boolean to check if the value has been set.
func (o *TransportEquipmentEvent) GetUNLocationCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UNLocationCode, true
}

// SetUNLocationCode sets field value
func (o *TransportEquipmentEvent) SetUNLocationCode(v string) {
	o.UNLocationCode = v
}

// GetFacilityCode returns the FacilityCode field value
func (o *TransportEquipmentEvent) GetFacilityCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FacilityCode
}

// GetFacilityCodeOk returns a tuple with the FacilityCode field value
// and a boolean to check if the value has been set.
func (o *TransportEquipmentEvent) GetFacilityCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FacilityCode, true
}

// SetFacilityCode sets field value
func (o *TransportEquipmentEvent) SetFacilityCode(v string) {
	o.FacilityCode = v
}

// GetOtherFacility returns the OtherFacility field value if set, zero value otherwise.
func (o *TransportEquipmentEvent) GetOtherFacility() string {
	if o == nil || o.OtherFacility == nil {
		var ret string
		return ret
	}
	return *o.OtherFacility
}

// GetOtherFacilityOk returns a tuple with the OtherFacility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportEquipmentEvent) GetOtherFacilityOk() (*string, bool) {
	if o == nil || o.OtherFacility == nil {
		return nil, false
	}
	return o.OtherFacility, true
}

// HasOtherFacility returns a boolean if a field has been set.
func (o *TransportEquipmentEvent) HasOtherFacility() bool {
	if o != nil && o.OtherFacility != nil {
		return true
	}

	return false
}

// SetOtherFacility gets a reference to the given string and assigns it to the OtherFacility field.
func (o *TransportEquipmentEvent) SetOtherFacility(v string) {
	o.OtherFacility = &v
}

// GetEmptyIndicatorCode returns the EmptyIndicatorCode field value
func (o *TransportEquipmentEvent) GetEmptyIndicatorCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmptyIndicatorCode
}

// GetEmptyIndicatorCodeOk returns a tuple with the EmptyIndicatorCode field value
// and a boolean to check if the value has been set.
func (o *TransportEquipmentEvent) GetEmptyIndicatorCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EmptyIndicatorCode, true
}

// SetEmptyIndicatorCode sets field value
func (o *TransportEquipmentEvent) SetEmptyIndicatorCode(v string) {
	o.EmptyIndicatorCode = v
}

// GetModeOfTransportCode returns the ModeOfTransportCode field value
func (o *TransportEquipmentEvent) GetModeOfTransportCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModeOfTransportCode
}

// GetModeOfTransportCodeOk returns a tuple with the ModeOfTransportCode field value
// and a boolean to check if the value has been set.
func (o *TransportEquipmentEvent) GetModeOfTransportCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ModeOfTransportCode, true
}

// SetModeOfTransportCode sets field value
func (o *TransportEquipmentEvent) SetModeOfTransportCode(v string) {
	o.ModeOfTransportCode = v
}

func (o TransportEquipmentEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["eventID"] = o.EventID
	}
	if true {
		toSerialize["eventDateTime"] = o.EventDateTime
	}
	if true {
		toSerialize["eventClassifierCode"] = o.EventClassifierCode
	}
	if true {
		toSerialize["eventTypeCode"] = o.EventTypeCode
	}
	if true {
		toSerialize["transportReference"] = o.TransportReference
	}
	if true {
		toSerialize["transportLegReference"] = o.TransportLegReference
	}
	if true {
		toSerialize["equipmentReference"] = o.EquipmentReference
	}
	if true {
		toSerialize["facilityTypeCode"] = o.FacilityTypeCode
	}
	if true {
		toSerialize["UNLocationCode"] = o.UNLocationCode
	}
	if true {
		toSerialize["facilityCode"] = o.FacilityCode
	}
	if o.OtherFacility != nil {
		toSerialize["otherFacility"] = o.OtherFacility
	}
	if true {
		toSerialize["emptyIndicatorCode"] = o.EmptyIndicatorCode
	}
	if true {
		toSerialize["modeOfTransportCode"] = o.ModeOfTransportCode
	}
	return json.Marshal(toSerialize)
}

type NullableTransportEquipmentEvent struct {
	value *TransportEquipmentEvent
	isSet bool
}

func (v NullableTransportEquipmentEvent) Get() *TransportEquipmentEvent {
	return v.value
}

func (v *NullableTransportEquipmentEvent) Set(val *TransportEquipmentEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableTransportEquipmentEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableTransportEquipmentEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransportEquipmentEvent(val *TransportEquipmentEvent) *NullableTransportEquipmentEvent {
	return &NullableTransportEquipmentEvent{value: val, isSet: true}
}

func (v NullableTransportEquipmentEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransportEquipmentEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


